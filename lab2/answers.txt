# Fill in your name, student ID, and email address in this file.

# If you are working in a team, remove the # signs from the three lines for
# partner 2 below and fill them in as well. Please submit the lab to CourseWeb
# only once (from only one partner). This file will be automatically parsed in
# order to give both team members credit for the lab.

# If you have any other information you'd like us to know, please add it at
# the end of the file.

# Partner 1
Name: Chunnan Yao
Student ID: 204568002
Email: yaochunnan@ucla.edu

# Partner 2
#Name: Partner's Name Here
#Student ID: Partner's ID Here
#Email: Partner's Email Here


# Add any other information you'd like us to have below this line.
I implemented lock functionality using three lists: write_locking_pids, read_locking_pids and invalid_tickets. For corresponding helper functions and there functionality please refer to my comments in code.

For dead lock checking, my implementation support detection of self deadlock and chained deadlock. My deadlock detection algorithm is as follows:

 * If current process requires a write lock, check if current pid holds other locks.
 * If yes, then there will be deadlock. 
 * If current process requires a read lock, check if currnet pid holds a read lock already. 
 * If yes, then check if the last assigned ticket_head is a write ticket
 * If also yes, then there will be deadlock. 

This is implemented by adding a field “head_write” in osprd_info_t to indicate the type of the latest assigned ticket. Also the logic is implemented in “check_dead_lock(int writable, osprd_info_t *d);” function. 

My test case 18,19,20 checks self dead lock, chained deadlock(chain length=2 and 4 respectively). 

Attention: Due to different virtual IO speed on VM, test case 16 and 17 might be failed occasionally. This is internal race condition of disk IO rather than fault of my implementation.

